// == Free Fire File Replacer Script ==
class FFFileReplacer {
  constructor() {
    this.TARGET = "cache_res.OdVY88vqa9NcdHWx8dKH1EWvhoo~3D";
    this.BASE64_URL = "https://raw.githubusercontent.com/dtiendzai123/noidungcachehead100/main/cache_res.OdVY88vqa9NcdHWx8dKH1EWvhoo~3D%2520.bundle.base64";
    this.isProcessing = false;
  }

  // T·∫£i file base64 t·ª´ URL
  async downloadBase64File(url) {
    try {
      console.log(`üì• ƒêang t·∫£i file t·ª´: ${url}`);
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const base64Data = await response.text();
      console.log("‚úÖ T·∫£i file th√†nh c√¥ng!");
      return base64Data.trim();
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i file:", error);
      throw error;
    }
  }

  // Chuy·ªÉn ƒë·ªïi base64 th√†nh blob
  base64ToBlob(base64Data, contentType = "application/octet-stream") {
    try {
      const base64 = base64Data.replace(/^data:[^;]+;base64,/, "");
      const byteCharacters = atob(base64);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      return new Blob([byteArray], { type: contentType });
    } catch (error) {
      console.error("‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi base64:", error);
      throw error;
    }
  }

  // T·∫°o URL t·∫£i xu·ªëng
  createDownloadUrl(blob, filename) {
    const url = URL.createObjectURL(blob);
    return { url, filename };
  }

  // T·ª± ƒë·ªông t·∫£i file xu·ªëng
  downloadFile(url, filename) {
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  // X·ª≠ l√Ω thay th·∫ø file ch√≠nh
  async replaceFile(customUrl = null, customTarget = null) {
    if (this.isProcessing) {
      console.log("‚ö†Ô∏è ƒêang x·ª≠ l√Ω, vui l√≤ng ƒë·ª£i...");
      return;
    }

    try {
      this.isProcessing = true;
      const url = customUrl || this.BASE64_URL;
      const target = customTarget || this.TARGET;

      console.log("=== üõ†Ô∏è B·∫ÆT ƒê·∫¶U QU√Å TR√åNH THAY TH·∫æ FILE ===");
      console.log(`üéØ Target file: ${target}`);
      console.log(`üåê Source URL: ${url}`);

      const base64Data = await this.downloadBase64File(url);
      console.log(`üì¶ K√≠ch th∆∞·ªõc base64: ${base64Data.length} k√Ω t·ª±`);

      const blob = this.base64ToBlob(base64Data);
      console.log(`üìÇ K√≠ch th∆∞·ªõc file: ${blob.size} bytes`);

      const downloadInfo = this.createDownloadUrl(blob, target);
      console.log("‚úÖ FILE THAY TH·∫æ ƒê√É S·∫¥N S√ÄNG");
      console.log(`üìÅ File name: ${downloadInfo.filename}`);
      console.log(`üìè File size: ${blob.size} bytes`);

      this.downloadFile(downloadInfo.url, downloadInfo.filename);

      console.log("‚úÖ Ho√†n th√†nh! File ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng.");
      return {
        success: true,
        filename: downloadInfo.filename,
        size: blob.size,
        message: "File thay th·∫ø ƒë√£ ƒë∆∞·ª£c t·∫°o v√† t·∫£i xu·ªëng th√†nh c√¥ng!"
      };
    } catch (error) {
      console.error("‚ùå L·ªói trong qu√° tr√¨nh thay th·∫ø file:", error);
      return {
        success: false,
        error: error.message,
        message: "C√≥ l·ªói x·∫£y ra khi thay th·∫ø file!"
      };
    } finally {
      this.isProcessing = false;
    }
  }

  // Ki·ªÉm tra tr·∫°ng th√°i
  getStatus() {
    return {
      isProcessing: this.isProcessing,
      target: this.TARGET,
      baseUrl: this.BASE64_URL
    };
  }

  // C·∫≠p nh·∫≠t c·∫•u h√¨nh
  updateConfig(newTarget, newUrl) {
    this.TARGET = newTarget;
    this.BASE64_URL = newUrl;
    console.log("‚öôÔ∏è C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", {
      target: this.TARGET,
      url: this.BASE64_URL
    });
  }

  // X√°c th·ª±c URL
  validateUrl(url) {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  // Ch·∫°y v·ªõi c·∫•u h√¨nh t√πy ch·ªânh
  async runCustomReplace(config) {
    if (!config.url || !config.target) {
      throw new Error("Thi·∫øu th√¥ng tin URL ho·∫∑c target file");
    }

    if (!this.validateUrl(config.url)) {
      throw new Error("URL kh√¥ng h·ª£p l·ªá");
    }

    return await this.replaceFile(config.url, config.target);
  }
}

// Kh·ªüi t·∫°o
const fileReplacer = new FFFileReplacer();

// H√†m ch·∫°y nhanh
async function quickReplace() {
  console.log("üöÄ B·∫Øt ƒë·∫ßu thay th·∫ø file‚Ä¶");
  const result = await fileReplacer.replaceFile();
  if (result.success) {
    console.log("‚úÖ Th√†nh c√¥ng:", result.message);
  } else {
    console.log("‚ùå Th·∫•t b·∫°i:", result.message);
  }
  return result;
}

// H√†m thay th·∫ø v·ªõi c·∫•u h√¨nh t√πy ch·ªânh
async function customReplace(url, target) {
  console.log("üöÄ B·∫Øt ƒë·∫ßu thay th·∫ø file v·ªõi c·∫•u h√¨nh t√πy ch·ªânh‚Ä¶");
  const result = await fileReplacer.runCustomReplace({ url, target });
  if (result.success) {
    console.log("‚úÖ Th√†nh c√¥ng:", result.message);
  } else {
    console.log("‚ùå Th·∫•t b·∫°i:", result.message);
  }
  return result;
}

// Export cho Node.js
if (typeof module !== "undefined" && module.exports) {
  module.exports = { FFFileReplacer, quickReplace, customReplace };
}

// Export cho browser
if (typeof window !== "undefined") {
  window.FFFileReplacer = FFFileReplacer;
  window.quickReplace = quickReplace;
  window.customReplace = customReplace;
}

// G·ª£i √Ω s·ª≠ d·ª•ng
console.log("=== üß† FREE FIRE FILE REPLACER READY ===");
console.log("üëâ D√πng: quickReplace() ƒë·ªÉ ch·∫°y nhanh");
console.log("üëâ Ho·∫∑c: customReplace('url', 'targetFile')");
console.log("üìä Tr·∫°ng th√°i: fileReplacer.getStatus()");
